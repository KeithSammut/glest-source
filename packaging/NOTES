temp notes file (-andy5995)

# common options for Cmake prior to `make install`

cmake ..

To see other install locations, use `cmake .. -LH`.

# generating the man page


				COMMAND ${XVFB_EXEC} --auto-servernum --server-num=770
${HELP2MAN} --name="3D multi-player real time strategy game" --section=6 -N -o
${HELP2MAN_OUT_PATH}${TARGET_NAME_MANPAGE} ${HELP2MAN_OUT_PATH}${TARGET_NAME}
			DEPENDS ${TARGET_NAME})
		ELSE()
			add_custom_target(${TARGET_NAME_MANPAGE} ALL
				COMMAND ${HELP2MAN} --name="${ZG_MANPAGE_DESCRIPTION}" --section=6 -N -o ${HELP2MAN_OUT_PATH}${TARGET_NAME_MANPAGE} ${HELP2MAN_OUT_PATH}${TARGET_NAME}


# Searcn and replace using 'git grep'

git grep -l 'original_text' | xargs sed -i 's/original_text/new_text/g'


# installing to a temp directory, preparation for packaging

mkdir install-build
cd install-build
cmake ..
make -j? (where ? is the number of CPU cores)
make install DESTDIR=$PWD/install-test


When packaging, binaries must be STRIPPED of debug symbols.
This is probably done automatically simply by changing the cmake build type to release.

For the slackbuild, the strip command is in the script.

# SlackBuild

When the "Slackbuild" is made, it's not really a build at all. The
files in that directory are edited with the correct information, and
then the contents of the "slackbuilds/glest" directory are zipped into a single
"glest.tar.gz" file. At that point, it can be submitted for
inclusion to Slackbuilds.org

I have 2 other projects there and don't anticipate there will be any
problem getting it included.

glest.info - Only shows a few dependencies. Because the other libs
are shipped with Slackware. They will be found when the user processes
the slackbuild script
